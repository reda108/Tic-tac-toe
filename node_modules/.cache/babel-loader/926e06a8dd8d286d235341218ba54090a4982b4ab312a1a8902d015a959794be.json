{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\redab\\\\Downloads\\\\Archive\\\\src\\\\ComputerPlayer2.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar difficultyLevel;\nclass ComputerPlayer2 extends React.Component {\n  getMoveEasy(squares) {\n    const emptySquares = squares.reduce((acc, value, index) => {\n      if (value === null) {\n        acc.push(index);\n      }\n      return acc;\n    }, []);\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    return emptySquares[randomIndex];\n  }\n  getMoveMedium(squares) {\n    const rows = [[0, 1, 2], [3, 4, 5], [6, 7, 8]];\n    const columns = [[0, 3, 6], [1, 4, 7], [2, 5, 8]];\n    const diagonals = [[0, 4, 8], [2, 4, 6]];\n    const possibleWins = rows.concat(columns, diagonals);\n    for (let i = 0; i < possibleWins.length; i++) {\n      const [a, b, c] = possibleWins[i];\n      if (squares[a] === 'O' && squares[a] === squares[b] && squares[c] === null) {\n        return c;\n      } else if (squares[b] === 'O' && squares[b] === squares[c] && squares[a] === null) {\n        return a;\n      } else if (squares[c] === 'O' && squares[c] === squares[a] && squares[b] === null) {\n        return b;\n      } else if (squares[a] === 'X' && squares[a] === squares[b] && squares[c] === null) {\n        return c;\n      } else if (squares[b] === 'X' && squares[b] === squares[c] && squares[a] === null) {\n        return a;\n      } else if (squares[c] === 'X' && squares[c] === squares[a] && squares[b] === null) {\n        return b;\n      }\n    }\n    const emptySquares = squares.reduce((acc, value, index) => {\n      if (value === null) {\n        acc.push(index);\n      }\n      return acc;\n    }, []);\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    return emptySquares[randomIndex];\n  }\n  getMoveHard(squares) {\n    // Define the recursive minimax function using an arrow function to maintain the correct value of `this`\n    const minimax = (depth, alpha, beta, isMaximizingPlayer) => {\n      // Base case: return the score if the game is over or the maximum depth has been reached\n      if (this.calculateWinner(squares) || depth === 0) {\n        return this.evaluate(squares);\n      }\n\n      // Recursive case: find the best score for the current player by exploring all possible moves\n      if (isMaximizingPlayer) {\n        let maxScore = -Infinity;\n        for (let i = 0; i < squares.length; i++) {\n          if (squares[i]) continue;\n          squares[i] = this.getCurrentPlayer();\n          let score = minimax(depth - 1, alpha, beta, false);\n          squares[i] = null;\n          maxScore = Math.max(maxScore, score);\n          alpha = Math.max(alpha, score);\n          if (beta <= alpha) break;\n        }\n        return maxScore;\n      } else {\n        let minScore = Infinity;\n        for (let i = 0; i < squares.length; i++) {\n          if (squares[i]) continue;\n          squares[i] = this.getOtherPlayer();\n          let score = minimax(depth - 1, alpha, beta, true);\n          squares[i] = null;\n          minScore = Math.min(minScore, score);\n          beta = Math.min(beta, score);\n          if (beta <= alpha) break;\n        }\n        return minScore;\n      }\n    };\n    let bestScore = -Infinity;\n    let bestMove;\n\n    // Find the best move by evaluating all possible moves\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i]) continue;\n      squares[i] = this.getCurrentPlayer();\n      let score = minimax(3, -Infinity, Infinity, false);\n      squares[i] = null;\n      if (score > bestScore) {\n        bestScore = score;\n        bestMove = i;\n      }\n    }\n    return bestMove;\n  }\n  getMove(squares, player) {\n    console.log(difficultyLevel);\n    let move;\n    if (difficultyLevel === 'medium') {\n      move = this.getMoveMedium(squares);\n    } else if (difficultyLevel === 'hard') {\n      move = this.getMoveHard(squares);\n    } else {\n      move = this.getMoveEasy(squares);\n    }\n    return move;\n  }\n  render() {\n    difficultyLevel = this.props.difficultyLevel;\n    console.log(difficultyLevel);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"      \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", this.props.difficultyLevel, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default ComputerPlayer2;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","difficultyLevel","ComputerPlayer2","Component","getMoveEasy","squares","emptySquares","reduce","acc","value","index","push","randomIndex","Math","floor","random","length","getMoveMedium","rows","columns","diagonals","possibleWins","concat","i","a","b","c","getMoveHard","minimax","depth","alpha","beta","isMaximizingPlayer","calculateWinner","evaluate","maxScore","Infinity","getCurrentPlayer","score","max","minScore","getOtherPlayer","min","bestScore","bestMove","getMove","player","console","log","move","render","props","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/redab/Downloads/Archive/src/ComputerPlayer2.js"],"sourcesContent":["import React from 'react';\nvar difficultyLevel;\nclass ComputerPlayer2 extends React.Component {\n    \n  getMoveEasy(squares) {\n    const emptySquares = squares.reduce((acc, value, index) => {\n      if (value === null) {\n        acc.push(index);\n      }\n      return acc;\n    }, []);\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    return emptySquares[randomIndex];\n  }\n\n  getMoveMedium(squares) {\n    const rows = [[0, 1, 2], [3, 4, 5], [6, 7, 8]];\n    const columns = [[0, 3, 6], [1, 4, 7], [2, 5, 8]];\n    const diagonals = [[0, 4, 8], [2, 4, 6]];\n    const possibleWins = rows.concat(columns, diagonals);\n    \n    for (let i = 0; i < possibleWins.length; i++) {\n      const [a, b, c] = possibleWins[i];\n      if (squares[a] === 'O' && squares[a] === squares[b] && squares[c] === null) {\n        return c;\n      } else if (squares[b] === 'O' && squares[b] === squares[c] && squares[a] === null) {\n        return a;\n      } else if (squares[c] === 'O' && squares[c] === squares[a] && squares[b] === null) {\n        return b;\n      } else if (squares[a] === 'X' && squares[a] === squares[b] && squares[c] === null) {\n        return c;\n      } else if (squares[b] === 'X' && squares[b] === squares[c] && squares[a] === null) {\n        return a;\n      } else if (squares[c] === 'X' && squares[c] === squares[a] && squares[b] === null) {\n        return b;\n      }\n    }\n\n    const emptySquares = squares.reduce((acc, value, index) => {\n      if (value === null) {\n        acc.push(index);\n      }\n      return acc;\n    }, []);\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    return emptySquares[randomIndex];\n  }\n\n  getMoveHard(squares) {\n    // Define the recursive minimax function using an arrow function to maintain the correct value of `this`\n    const minimax = (depth, alpha, beta, isMaximizingPlayer) => {\n      // Base case: return the score if the game is over or the maximum depth has been reached\n      if (this.calculateWinner(squares) || depth === 0) {\n        return this.evaluate(squares);\n      }\n  \n      // Recursive case: find the best score for the current player by exploring all possible moves\n      if (isMaximizingPlayer) {\n        let maxScore = -Infinity;\n        for (let i = 0; i < squares.length; i++) {\n          if (squares[i]) continue;\n          squares[i] = this.getCurrentPlayer();\n          let score = minimax(depth - 1, alpha, beta, false);\n          squares[i] = null;\n          maxScore = Math.max(maxScore, score);\n          alpha = Math.max(alpha, score);\n          if (beta <= alpha) break;\n        }\n        return maxScore;\n      } else {\n        let minScore = Infinity;\n        for (let i = 0; i < squares.length; i++) {\n          if (squares[i]) continue;\n          squares[i] = this.getOtherPlayer();\n          let score = minimax(depth - 1, alpha, beta, true);\n          squares[i] = null;\n          minScore = Math.min(minScore, score);\n          beta = Math.min(beta, score);\n          if (beta <= alpha) break;\n        }\n        return minScore;\n      }\n    }\n  \n    let bestScore = -Infinity;\n    let bestMove;\n  \n    // Find the best move by evaluating all possible moves\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i]) continue;\n      squares[i] = this.getCurrentPlayer();\n      let score = minimax(3, -Infinity, Infinity, false);\n      squares[i] = null;\n      if (score > bestScore) {\n        bestScore = score;\n        bestMove = i;\n      }\n    }\n  \n    return bestMove;\n  }\n  \n  getMove(squares, player) {\n    console.log(difficultyLevel);\n\n    let move;\n    if (difficultyLevel === 'medium') {\n      move = this.getMoveMedium(squares);\n    } else if (difficultyLevel === 'hard') {\n      move = this.getMoveHard(squares);\n    } else {\n      move = this.getMoveEasy(squares);\n    }\n    return move;\n  }\n\n  render() {\n    difficultyLevel=this.props.difficultyLevel;\n    console.log(difficultyLevel);\n\n    return <div>      <h2> {this.props.difficultyLevel} </h2>\n    </div>;\n  }\n}\n\nexport default ComputerPlayer2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}